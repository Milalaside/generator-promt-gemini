
import { GoogleGenAI, GenerateImagesResponse } from "@google/genai";

// IMPORTANT: API_KEY is expected to be set in the environment.
// For example, in a Node.js environment or bundler like Vite/Webpack.
// If running directly in a browser without a backend proxy (not recommended for production due to key exposure),
// this key would need to be available in `process.env` somehow, or you'd adapt this.
// For this project, we assume `process.env.API_KEY` is correctly populated.
const API_KEY = process.env.API_KEY;

let ai: GoogleGenAI | null = null;

if (API_KEY) {
  ai = new GoogleGenAI({ apiKey: API_KEY });
} else {
  console.error(
    "Gemini API key (process.env.API_KEY) is not configured. Image generation will fail. " +
    "Please ensure the API_KEY environment variable is set."
  );
}

export const generateImageFromApi = async (prompt: string): Promise<string> => {
  if (!ai) {
    throw new Error(
      "Gemini API client is not initialized. Please configure API_KEY."
    );
  }

  try {
    const response: GenerateImagesResponse = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002', // Correct model for image generation
      prompt: prompt,
      config: { 
        numberOfImages: 1, 
        outputMimeType: 'image/jpeg' // jpeg is generally smaller
      },
    });

    // According to SDK:
    // response.generatedImages is an array of GeneratedImage objects.
    // Each GeneratedImage object has an 'image' property which is an ImageObject.
    // ImageObject has 'imageBytes' (string) and 'mimeType' (string).

    if (response.generatedImages && response.generatedImages.length > 0) {
      const firstGeneratedImage = response.generatedImages[0]; // This is a GeneratedImage object

      // Check if the 'image' property exists and 'imageBytes' is a string
      if (firstGeneratedImage.image && typeof firstGeneratedImage.image.imageBytes === 'string') {
        // firstGeneratedImage.image is the ImageObject containing imageBytes
        return firstGeneratedImage.image.imageBytes;
      } else {
        // This means a GeneratedImage object was returned, but its internal structure is not as expected.
        throw new Error("Generated image data is incomplete or malformed in the API response. The 'image.imageBytes' field was not found or was not a string.");
      }
    } else {
      // This means the API call was successful, but no images were generated by the model.
      // This could be due to safety filters, the prompt resulting in no content, etc.
      // The 'GenerateImagesResponse' type doesn't explicitly have an 'error' field for this scenario.
      // We rely on the absence or emptiness of 'generatedImages'.
      throw new Error("No image was generated by the API. This might be due to content policies or an issue with the prompt. Please check the prompt or try a different one.");
    }
  } catch (err) {
    console.error("Error generating image with Gemini API:", err);
    if (err instanceof Error) {
      // This catches API call errors (network, auth, server-side issues from Gemini API itself)
      // or errors thrown from the logic above (e.g., malformed response).
      throw new Error(`Gemini API request failed or response processing error: ${err.message}`);
    }
    throw new Error("An unknown error occurred while communicating with the Gemini API or processing its response.");
  }
};

