import React from 'react';
import { Button } from './Button';
import { LoadingSpinner } from './LoadingSpinner';

interface ImageDisplayProps {
  composedPrompt: string;
  imageUrl: string | null;
  isLoading: boolean;
  error: string | null;
  onGenerateImage: () => void;
}

export const ImageDisplay: React.FC<ImageDisplayProps> = ({
  composedPrompt,
  imageUrl,
  isLoading,
  error,
  onGenerateImage,
}) => {
  return (
    <div className="bg-gray-800 bg-opacity-80 backdrop-blur-md shadow-2xl rounded-xl p-6 sm:p-8 flex flex-col space-y-6 h-full" style={{maxHeight: 'calc(100vh - 180px)'}}>
      <div className="flex-grow flex flex-col">
        <h2 className="text-2xl font-semibold text-purple-400 mb-4">Generated Image & Prompt</h2>
        
        {composedPrompt && (
          <div className="mb-6 p-4 bg-gray-700 bg-opacity-50 rounded-lg max-h-40 overflow-y-auto">
            <h3 className="text-sm font-semibold text-gray-400 mb-1">COMPOSED PROMPT:</h3>
            <p className="text-gray-200 text-sm leading-relaxed whitespace-pre-wrap break-words">{composedPrompt}</p>
          </div>
        )}

        <div className="flex-grow flex items-center justify-center bg-gray-700/30 rounded-lg min-h-[300px] sm:min-h-[400px] relative overflow-hidden">
          {isLoading && <LoadingSpinner />}
          {error && !isLoading && (
            <div className="text-center p-4">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-red-400 mx-auto mb-2" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
              <p className="text-red-400 font-semibold">Error Generating Image</p>
              <p className="text-red-300 text-sm mt-1 max-w-md mx-auto">{error}</p>
            </div>
          )}
          {imageUrl && !isLoading && !error && (
            <img src={imageUrl} alt="Generated by Gemini" className="max-h-full max-w-full object-contain rounded-lg" />
          )}
          {!imageUrl && !isLoading && !error && !composedPrompt && (
            <p className="text-gray-400">Compose your prompt using the form on the left.</p>
          )}
           {!imageUrl && !isLoading && !error && composedPrompt && (
            <p className="text-gray-400 p-4 text-center">Your composed prompt will appear above. Click "Generate Image" to begin.</p>
          )}
        </div>
      </div>
      
      <Button 
        onClick={onGenerateImage} 
        disabled={isLoading || !composedPrompt} 
        isLoading={isLoading}
        className="w-full mt-auto"
      >
        {isLoading ? 'Generating Image...' : 'Generate Image with Gemini'}
      </Button>
    </div>
  );
};
